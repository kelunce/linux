# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions

#是否需要包含自己的动态库根据需要
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64:/usr/local/lib

alias egrep='egrep --color=auto -n'

alias fgrep='fgrep --color=auto'

#不要搜索.svn目录和tags文件
options="--color=auto  --exclude-dir=\.svn --exclude-dir=\.tags --exclude-dir=\.git --exclude=core.* --exclude=*.o --exclude=*.a --exclude=*.b  --binary-files=without-match"
alias grep="grep $options"
unset options

alias sshhosts="grep -w -i Host ~/.ssh/config | awk  '{print $2}'"

enable_proxy()
{
    addr=http://192.168.16.108:2016
    export http_proxy=$addr
    export https_proxy=$addr
    export ftp_proxy=$addr
    echo "set proxy addr:"$addr
}

disable_proxy()
{
    unset http_proxy
    unset https_proxy
    unset ftp_proxy
}

upload()
{
    #从.netrc配置ftp密码
    ftp -pv lcm.space<<EOF
cd upload
put $1
bye
EOF
#   file=`pwd`/$1
#   ftp -oIdentityFile=/home/anker/.ssh/lenovo-rsa-key.pri -oPort=22 anker@192.168.16.108 <<EOF
#put $file
#bye
#EOF
}

download()
{
    #从.netrc配置ftp密码
    ftp -pv lcm.space<<EOF
cd upload
get $1
bye
EOF
#    file=$1
#    sftp -oIdentityFile=/home/anker/.ssh/lenovo-rsa-key.pri -oPort=22 anker@192.168.16.108 <<EOF
#get $file
#bye
#EOF
}

safe_upload()
{
    local tarfile=${1}.temp.`date +%Y-%M-%d-%H-%m-%S`.tar.gz
    local upfile=${1}.x
    local key='123456'

    tar -zcf $tarfile $1
    read -s -p 'Enter encrypt key:' key
    if [ ${#key} -eq 0 ]; then
        key='123456'
    fi

    openssl aes-128-cbc -salt -k $key -in $tarfile -out $upfile 
    printf '\ngoing to upload %s \n' $upfile
    # 调用函数
    upload $upfile 
    # clean
    rm -f $tarfile
    rm -f $upfile
}

safe_download()
{
    local rfile=${1}.x
    local key='123456'

    download $rfile

    read -s -p 'Enter encrypt key:' key
    if [ ${#key} -eq 0 ]; then
        key='123456'
    fi

    printf '\ngoing to decrypt file:%s \n' $rfile
    local tfile=${1}.`date +%Y-%M-%d-%H-%m-%S`.tar.gz
    openssl aes-128-cbc -d -salt -k $key -in $rfile -out $tfile
    tar -zxf $tfile
    rm -fr $rfile
    rm -fr $tfile
}

kvmlist () 
{ 
    ftp -pv lcm.space<<EOF
cd upload
ls
bye
EOF
}

# 如果存在vimx版本（vim-X11），重定向！默认vim没有clipboard编译选项
#if [ -e /usr/bin/vimx ]; then alias vim='/usr/bin/vimx'; fi

fc()
{
    find . -name "*.c" -o -name "*.h" | xargs egrep --color=auto -n "$1"
}

ff()
{
    find . -name "*" |  egrep -i $1
}

make()
{
    # 解决管道重定向导致输出混乱
    # 方案1：禁用全缓冲，使用行缓冲,这个方法对tee等重定制缓冲方式的程序无效
    #stdbuf --output=L --error=L /usr/bin/make "$@" 2>&1 | grep -E --color=always '\berror:|\bwarning:|$'
    # 方案2: script启动shell来执行命令，它是line buffering
    if [ $# -ge 1 -a $1 == 'start' -o  $1 == 'stop' ]
    then
        /usr/bin/make $@
    else
        script -q -c "/usr/bin/make $@ 2>&1 " /dev/null | grep -E --color=always '\berror:|\bwarning:|$'
    fi
}

vlog()
{
    if [ $# -eq 0 ]
    then
        find . -name "*.log" |xargs echo |xargs tail -f
    else
        find . -name "*$1*.log" |xargs echo |xargs tail -f
    fi
}

ve()
{
    find . -name "*.log" |xargs echo |xargs tail -f | grep error -i
}

px()
{
    python tools/parse_table.py . $1 default userd-anker-257
}

pm()
{
    python ./tools/autocode/mission/parse_mission.py $(pwd) $1  default userd-anker-257
}

pbm()
{
    python ./tools/autocode/mission/parse_brief_mission.py  $(pwd) $1  default userd-anker-257
}

buildTags()
{
    #自动生成本目录下面的ctag和cscope信息表
    # 如果传递参数则是vim中调用过来
    if [ $# -gt 0 ] ; then
        cd $1
        cd ..
    fi
    rm -fr .tags
    mkdir .tags
    cd .tags
    ctags  -R --c++-kinds=+p  --fields=+iaS --extra=+q --recurse=yes  -o ./tags ../
    cd ..
    # 使用pwd来获取绝对路径,使得find输出的文件路径都是绝对路径
    find `pwd`/ -name "*.h" -o -name "*.c" -o -name "*.cpp" -o -name "*.decl" > cscope.files
    cscope -Rbkqc -i cscope.files
    mv cscope.in.out  ./.tags/
    mv cscope.out ./.tags/
    mv cscope.po.out ./.tags/
    mv cscope.files ./.tags/
}

#不要搜索.svn目录和tags文件
export GREP_OPTIONS="--exclude-dir=\.svn --exclude-dir=\.tags --exclude-dir=\.git --exclude=core.* --exclude=*.o --exclude=*.a --exclude=*.b  --binary-files=without-match"
#git用vim输入提交日志
export GIT_EDITOR=vim
#生成core文件
ulimit -c unlimited

#ANSI 256 color chart
git config --global color.status.branch "blue normal bold"
git config --global color.status.changed 208
git config --global color.status.untracked magenta
git config --global color.ui auto
git config --global color.diff auto
git config --global color.branch auto
git config --global core.editor vim
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.new 'ls-files --others --exclude-standard' 
git config --global alias.st 'status -uno'
git config --global alias.last 'cat-file commit HEAD'
git config --global alias.unstage 'reset HEAD '
git config --global alias.discard 'checkout -- '
git config --global diff.tool vimdiff
git config --global merge.tool vimdiff
git config --global difftool.prompt false
git config --global mergetool.prompt false
git config --global alias.di difftool
git config --global alias.mt mergetool
git config --global alias.gr '!git fetch && git pull --rebase origin '
git config --global alias.pr '!git push origin '
git config --global alias.sb show-branch
git config --global alias.sm submodule
git config --global core.commentChar '|'
source /etc/bash_completion.d/git
#
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
    export TERM='xterm-256color'
else
    export TERM='xterm-color'
fi

